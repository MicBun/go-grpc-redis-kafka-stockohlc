// Code generated by mockery. DO NOT EDIT.

package stock

import (
	context "context"

	pb "github.com/MicBun/go-grpc-redis-kafka-stockohlc-client/stock/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetOneSummary provides a mock function with given fields: ctx, in
func (_m *MockManager) GetOneSummary(ctx context.Context, in *pb.GetOneSummaryRequest) (*pb.Stock, error) {
	ret := _m.Called(ctx, in)

	var r0 *pb.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetOneSummaryRequest) (*pb.Stock, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetOneSummaryRequest) *pb.Stock); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetOneSummaryRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetOneSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneSummary'
type MockManager_GetOneSummary_Call struct {
	*mock.Call
}

// GetOneSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.GetOneSummaryRequest
func (_e *MockManager_Expecter) GetOneSummary(ctx interface{}, in interface{}) *MockManager_GetOneSummary_Call {
	return &MockManager_GetOneSummary_Call{Call: _e.mock.On("GetOneSummary", ctx, in)}
}

func (_c *MockManager_GetOneSummary_Call) Run(run func(ctx context.Context, in *pb.GetOneSummaryRequest)) *MockManager_GetOneSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.GetOneSummaryRequest))
	})
	return _c
}

func (_c *MockManager_GetOneSummary_Call) Return(_a0 *pb.Stock, _a1 error) *MockManager_GetOneSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetOneSummary_Call) RunAndReturn(run func(context.Context, *pb.GetOneSummaryRequest) (*pb.Stock, error)) *MockManager_GetOneSummary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
