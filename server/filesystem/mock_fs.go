// Code generated by mockery. DO NOT EDIT.

package filesystem

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFS is an autogenerated mock type for the FS type
type MockFS struct {
	mock.Mock
}

type MockFS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFS) EXPECT() *MockFS_Expecter {
	return &MockFS_Expecter{mock: &_m.Mock}
}

// ReadDir provides a mock function with given fields: dirname
func (_m *MockFS) ReadDir(dirname string) ([]fs.DirEntry, error) {
	ret := _m.Called(dirname)

	var r0 []fs.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]fs.DirEntry, error)); ok {
		return rf(dirname)
	}
	if rf, ok := ret.Get(0).(func(string) []fs.DirEntry); ok {
		r0 = rf(dirname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dirname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFS_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type MockFS_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - dirname string
func (_e *MockFS_Expecter) ReadDir(dirname interface{}) *MockFS_ReadDir_Call {
	return &MockFS_ReadDir_Call{Call: _e.mock.On("ReadDir", dirname)}
}

func (_c *MockFS_ReadDir_Call) Run(run func(dirname string)) *MockFS_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFS_ReadDir_Call) Return(_a0 []fs.DirEntry, _a1 error) *MockFS_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFS_ReadDir_Call) RunAndReturn(run func(string) ([]fs.DirEntry, error)) *MockFS_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: name
func (_m *MockFS) ReadFile(name string) ([]byte, error) {
	ret := _m.Called(name)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFS_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFS_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - name string
func (_e *MockFS_Expecter) ReadFile(name interface{}) *MockFS_ReadFile_Call {
	return &MockFS_ReadFile_Call{Call: _e.mock.On("ReadFile", name)}
}

func (_c *MockFS_ReadFile_Call) Run(run func(name string)) *MockFS_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFS_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockFS_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFS_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFS_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFS creates a new instance of MockFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFS {
	mock := &MockFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
