// Code generated by mockery. DO NOT EDIT.

package pubsub

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockSubscriber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriber_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriber_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubscriber_Expecter) Close() *MockSubscriber_Close_Call {
	return &MockSubscriber_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubscriber_Close_Call) Run(run func()) *MockSubscriber_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriber_Close_Call) Return(_a0 error) *MockSubscriber_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriber_Close_Call) RunAndReturn(run func() error) *MockSubscriber_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockSubscriber) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriber_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSubscriber_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSubscriber_Expecter) Start(ctx interface{}) *MockSubscriber_Start_Call {
	return &MockSubscriber_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockSubscriber_Start_Call) Run(run func(ctx context.Context)) *MockSubscriber_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSubscriber_Start_Call) Return(_a0 error) *MockSubscriber_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriber_Start_Call) RunAndReturn(run func(context.Context) error) *MockSubscriber_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, handler
func (_m *MockSubscriber) Subscribe(topic string, handler SubscriberHandler) {
	_m.Called(topic, handler)
}

// MockSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - handler SubscriberHandler
func (_e *MockSubscriber_Expecter) Subscribe(topic interface{}, handler interface{}) *MockSubscriber_Subscribe_Call {
	return &MockSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, handler)}
}

func (_c *MockSubscriber_Subscribe_Call) Run(run func(topic string, handler SubscriberHandler)) *MockSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(SubscriberHandler))
	})
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) Return() *MockSubscriber_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) RunAndReturn(run func(string, SubscriberHandler)) *MockSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
