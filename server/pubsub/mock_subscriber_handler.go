// Code generated by mockery. DO NOT EDIT.

package pubsub

import (
	context "context"

	message "github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// MockSubscriberHandler is an autogenerated mock type for the SubscriberHandler type
type MockSubscriberHandler struct {
	mock.Mock
}

type MockSubscriberHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriberHandler) EXPECT() *MockSubscriberHandler_Expecter {
	return &MockSubscriberHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriberHandler) Execute(_a0 context.Context, _a1 *message.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *message.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriberHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSubscriberHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *message.Message
func (_e *MockSubscriberHandler_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockSubscriberHandler_Execute_Call {
	return &MockSubscriberHandler_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockSubscriberHandler_Execute_Call) Run(run func(_a0 context.Context, _a1 *message.Message)) *MockSubscriberHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*message.Message))
	})
	return _c
}

func (_c *MockSubscriberHandler_Execute_Call) Return(_a0 error) *MockSubscriberHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriberHandler_Execute_Call) RunAndReturn(run func(context.Context, *message.Message) error) *MockSubscriberHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriberHandler creates a new instance of MockSubscriberHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriberHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriberHandler {
	mock := &MockSubscriberHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
