// Code generated by mockery. DO NOT EDIT.

package watcher

import (
	fsnotify "github.com/fsnotify/fsnotify"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: name
func (_m *MockManager) Add(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockManager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) Add(name interface{}) *MockManager_Add_Call {
	return &MockManager_Add_Call{Call: _e.mock.On("Add", name)}
}

func (_c *MockManager_Add_Call) Run(run func(name string)) *MockManager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Add_Call) Return(_a0 error) *MockManager_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Add_Call) RunAndReturn(run func(string) error) *MockManager_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockManager) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:
func (_m *MockManager) Error() chan error {
	ret := _m.Called()

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// MockManager_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockManager_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockManager_Expecter) Error() *MockManager_Error_Call {
	return &MockManager_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockManager_Error_Call) Run(run func()) *MockManager_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Error_Call) Return(_a0 chan error) *MockManager_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Error_Call) RunAndReturn(run func() chan error) *MockManager_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields:
func (_m *MockManager) Event() chan fsnotify.Event {
	ret := _m.Called()

	var r0 chan fsnotify.Event
	if rf, ok := ret.Get(0).(func() chan fsnotify.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan fsnotify.Event)
		}
	}

	return r0
}

// MockManager_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockManager_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *MockManager_Expecter) Event() *MockManager_Event_Call {
	return &MockManager_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *MockManager_Event_Call) Run(run func()) *MockManager_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Event_Call) Return(_a0 chan fsnotify.Event) *MockManager_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Event_Call) RunAndReturn(run func() chan fsnotify.Event) *MockManager_Event_Call {
	_c.Call.Return(run)
	return _c
}

// StartDirectoryMonitor provides a mock function with given fields: wg
func (_m *MockManager) StartDirectoryMonitor(wg *sync.WaitGroup) {
	_m.Called(wg)
}

// MockManager_StartDirectoryMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDirectoryMonitor'
type MockManager_StartDirectoryMonitor_Call struct {
	*mock.Call
}

// StartDirectoryMonitor is a helper method to define mock.On call
//   - wg *sync.WaitGroup
func (_e *MockManager_Expecter) StartDirectoryMonitor(wg interface{}) *MockManager_StartDirectoryMonitor_Call {
	return &MockManager_StartDirectoryMonitor_Call{Call: _e.mock.On("StartDirectoryMonitor", wg)}
}

func (_c *MockManager_StartDirectoryMonitor_Call) Run(run func(wg *sync.WaitGroup)) *MockManager_StartDirectoryMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.WaitGroup))
	})
	return _c
}

func (_c *MockManager_StartDirectoryMonitor_Call) Return() *MockManager_StartDirectoryMonitor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_StartDirectoryMonitor_Call) RunAndReturn(run func(*sync.WaitGroup)) *MockManager_StartDirectoryMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
